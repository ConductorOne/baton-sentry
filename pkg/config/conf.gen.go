// Code generated by baton-sdk. DO NOT EDIT!!!
package config

import "reflect" 

type Sentry struct {
	Configfield string `mapstructure:"configField"`
}

func (c* Sentry) findFieldByTag(tagValue string) (any, bool) {
	v := reflect.ValueOf(c).Elem() // Dereference pointer to struct
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		tag := field.Tag.Get("mapstructure")

		if tag == tagValue {
			return v.Field(i).Interface(), true
		}
	}
	return nil, false
}

func (c *Sentry) GetStringSlice(fieldName string) []string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return []string{}
	}
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Sentry) GetString(fieldName string) string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return ""
	}
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Sentry) GetInt(fieldName string) int {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return 0
	}
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Sentry) GetBool(fieldName string) bool {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return false
	}
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Sentry) GetStringMap(fieldName string) map[string]any {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return map[string]any{}
	}
	t, ok := v.(map[string]any)
	if !ok {
		panic("wrong type")
	}
	return t
}
